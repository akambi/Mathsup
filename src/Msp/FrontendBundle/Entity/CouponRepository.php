<?php

namespace Msp\FrontendBundle\Entity;

use Doctrine\ORM\EntityRepository;

/**
 * CouponRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CouponRepository extends EntityRepository
{
    public function getTotal()
    {
        $qb = $this->createQueryBuilder('a')->select('COUNT(a)'); 
        return (int) $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getAllForUser( $user )
    {
        $qb =   $this->createQueryBuilder('a')
                ->select('COUNT(a)')
                ->where('a.user = :user')
                ->setParameter('user', $user); 
        return (int) $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getAllIsUseForUser( $user )
    {
        $qb =   $this->createQueryBuilder('a')
                ->select('COUNT(a)')
                ->innerJoin('a.ticket', 't')
                ->where('a.user = :user')
                ->setParameter('user', $user); 
        return (int) $qb->getQuery()->getSingleScalarResult();
    }
    
    public function getAllIsNotUseForUser( $user )
    {
        $qb = $this->_em->createQueryBuilder();
        
        $nots = $this->createQueryBuilder('a')
                ->select('a')
                ->innerJoin('a.ticket', 't')
                ->where('a.user = :user')
                ->setParameter('user', $user)
                ->getQuery()
                ->getResult();        
       
        $linked =   $qb->select('a')
                    ->from( $this->_entityName, 'a')                                  
                    ->where('a.user = :user')
                    ->setParameter('user', $user);
        if($nots):
            $linked->andWhere($qb->expr()->notIn('a.token', $nots));
        endif;
 
        return $linked->getQuery()->getResult();
    }
    
    public function getUserCouponAlert()
    {
        $qb = $this->_em->createQueryBuilder();
        
        $nots = $this->createQueryBuilder('a')
                ->select('a')
                ->innerJoin('a.ticket', 't')                
                ->getQuery()
                ->getResult();        
       
        $linked =   $qb->select('COUNT(a) As nb, a')
                    ->from( $this->_entityName, 'a')
                    ->innerJoin('a.user', 'u')
                    ->where('u.roles like :roles')
                    ->setParameter('roles', '%ROLE_ELEVE%');                    
                    
        if($nots):
            $linked->andWhere($qb->expr()->notIn('a.token', $nots));
        endif;
        
        $linked->orderBy('a.user', 'ASC');
        $linked->groupBy('a.user');
        
        return $linked->getQuery()->getResult();
    }
}
